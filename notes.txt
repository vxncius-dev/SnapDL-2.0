!!! ver pq não ta focando

from os import path
from platform import system
from json import dumps, load
import flet as ft
from .search import SearchManager
from .downloader import DownloadManager
from .ffmepg_helper import FFmpegHelper

DEBUG_MODE = True
IS_MOBILE = False


class SnapDL:
    def __init__(self):
        self.page = None
        self.base_dir = path.dirname(path.abspath(__file__))
        self.seach_mananger = SearchManager()
        self.donwload_mananger = DownloadManager()
        self.ffmpeg_setup = FFmpegHelper()
        self.colors = {
            "bg": "#0D0D0D",
            "text": "#FFFFFF",
            "primary": "#90CAF9",
            "secondary": "#64B5F6",
            "border": "#3B3B3B",
            "icon": "#FFFFFF",
            "hint": "#AAAAAA",
            "search_bg": "#1E1E1E",
            "search_border": "#3B3B3B",
        }
        self.search_result = {}
        self.current_page = None
        self.current_route = "/"

        if DEBUG_MODE:
            try:
                placeholder_path = path.join(
                    self.base_dir, "..", "assets", "result_placeholder.json"
                )
                if path.exists(placeholder_path):
                    with open(placeholder_path, "r", encoding="utf-8") as f:
                        self.search_result = load(f)
                    self.log(f"Carregado: {placeholder_path}")
                else:
                    self.log(
                        f"result_placeholder.json não encontrado em {placeholder_path}"
                    )
            except Exception as e:
                self.log(f"Erro ao carregar result_placeholder.json: {e}")

        ft.app(target=self.main)

    def log(self, mesage):
        print(f"[DEBUG] {str(mesage)}")

    def on_search(self):
        value = self.search_input.value.strip()
        if value:
            self.search_result = self.seach_mananger.search_youtube(value)
            self.log(dumps(self.search_result, indent=4))

    def homepage(self, w):
        # Ajusta largura do search_bar sem recriar o input
        self.search_bar.width = min(400, w * 0.6)

        return ft.Container(
            content=ft.Column(
                [
                    ft.Text("SnapDL", color=self.colors["text"], size=45, font_family="Poppins-Bold"),
                    self.search_bar
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                spacing=10,
                width=w,
            ),
            bgcolor=self.colors["bg"],
            expand=True,
        )

    def setup_window(self, page, w, h, screen):
        def handle_minimize(e):
            page.window.minimized = True
            page.update()

        def handle_maximize(e):
            page.window.maximized = not page.window.maximized
            page.update()

        def handle_close(e):
            page.window.close()

        def window_button(action):
            return ft.GestureDetector(
                on_tap=action,
                content=ft.Container(
                    width=17,
                    height=17,
                    bgcolor="#666666",
                    border_radius=10,
                ),
            )

        window_controls = ft.Container(
            content=ft.Row(
                [
                    window_button(handle_minimize),
                    window_button(handle_maximize),
                    window_button(handle_close),
                ],
                spacing=10,
            ),
        )

        content_base = ft.Container(
            content=ft.Stack(
                controls=[
                    screen,
                    (
                        ft.Container(
                            content=window_controls,
                            alignment=ft.alignment.top_left,
                            padding=ft.padding.only(left=12, top=10),
                        )
                        if not IS_MOBILE
                        else ft.Container()
                    ),
                ],
                expand=True,
            ),
            bgcolor=self.colors["bg"],
            width=w,
            height=h,
        )

        if IS_MOBILE:
            return ft.SafeArea(content=content_base, expand=True)
        else:
            return ft.WindowDragArea(content_base, expand=True, maximizable=False)

    def navigator(self, route="/", w=800):
        self.current_route = route
        if route == "/":
            return self.setup_window(self.page, w, self.height, self.homepage(w))

    def aspect_ratio_from_page(self, page, fmt: str = "wide", percent: float = 0.8):
        presets = {
            "square": (1, 1),
            "wide": (16, 9),
            "portrait": (9, 16),
            "ultrawide": (21, 9),
        }

        if fmt in presets:
            w_ratio, h_ratio = presets[fmt]
        else:
            sep = "x" if "x" in fmt else ":"
            w_ratio, h_ratio = map(float, fmt.split(sep))

        target_ratio = w_ratio / h_ratio
        win_w = page.window.width or 1280
        win_h = page.window.height or 720
        if win_w == 0 or win_h == 0:
            win_w, win_h = 1280, 720
        max_w = win_w * percent
        max_h = win_h * percent
        if target_ratio > (win_w / win_h):
            width = max_w
            height = width / target_ratio
            if height > max_h:
                height = max_h
                width = height * target_ratio
        else:
            height = max_h
            width = height * target_ratio
            if width > max_w:
                width = max_w
                height = width / target_ratio

        return int(width), int(height)

    async def main(self, page: ft.Page):
        self.page = page
        page.title = "SnapDL"
        page.fonts = {
            "Poppins-Bold": path.join(self.base_dir, "..", "fonts", "Poppins-Bold.ttf"),
            "Poppins-Regular": path.join(
                self.base_dir, "..", "fonts", "Poppins-Regular.ttf"
            ),
        }

        self.scren_format = "portrait" if IS_MOBILE else "wide"
        self.width, self.height = self.aspect_ratio_from_page(page, self.scren_format)
        page.window.width = self.width
        page.window.height = self.height
        page.bgcolor = self.colors["bg"]
        page.window.icon = path.join(self.base_dir, "..", "assets", "favicon.png")
        page.window.title_bar_hidden = True
        page.window.center()
        page.padding = 0

        # cria input e search_bar uma vez
        self.search_input = ft.TextField(
            hint_text="Search",
            border=ft.InputBorder.NONE,
            hover_color=ft.Colors.TRANSPARENT,
            bgcolor=self.colors["search_bg"],
            cursor_color=self.colors["primary"],
            text_style=ft.TextStyle(color=self.colors["text"], size=17),
            hint_style=ft.TextStyle(color=self.colors["hint"]),
            expand=True,
            on_submit=lambda e: self.on_search(),
        )

        self.search_bar = ft.Container(
            content=ft.Row(
                [
                    ft.Icon(name=ft.Icons.DOWNLOAD, color=self.colors["icon"], size=20),
                    self.search_input,
                    ft.IconButton(
                        icon=ft.Icons.SEARCH,
                        icon_color=self.colors["icon"],
                        icon_size=20,
                        tooltip="Search",
                        on_click=lambda e: self.on_search(),
                    ),
                ],
                alignment=ft.MainAxisAlignment.START,
            ),
            bgcolor=self.colors["search_bg"],
            border=ft.border.all(1, self.colors["search_border"]),
            border_radius=50,
            padding=ft.padding.symmetric(horizontal=15, vertical=0),
            margin=ft.margin.symmetric(horizontal=20),
            width=self.width * 0.6,
        )

        # render inicial
        self.current_page = self.navigator("/", self.width)
        page.add(self.current_page)

        # atualização ao redimensionar
        def on_resize(e):
            w = page.window.width
            h = page.window.height
            self.width, self.height = w, h
            page.controls.clear()
            self.current_page = self.navigator("/", w)
            page.add(self.current_page)
            page.update()

        page.on_resized = on_resize
